//@author: a0112522y



	/**
	 * origin: D:\install location\java\work\CS2103 PISTA\src\pista\parser\MainParser.java
	 */

	/**This method is checks if a string is empty
	 * Parameters: String - a string that consists of command + parameters
	 * Return:		Boolean
	 * 				True if empty
	 * 				false if it is not
	 * **/
	public static boolean isEmptyString(String input){
		if(input.isEmpty()){
			return true;
		}
		return false;
	}
	
	/**This method extracts the user command from a string
	 * Parameters: String - a string that consists of command + parameters
	 * Return:		String - which consists only the command
	 * **/
	public static String getCommand(String input){
		String command=input.split(" ",Constants.SPLIT_INTO_TWO)[Constants.INDEX_ZERO];
		return command;
	}
	
	// End of segment: D:\install location\java\work\CS2103 PISTA\src\pista\parser\MainParser.java





	/**
	 * origin: D:\install location\java\work\CS2103 PISTA\src\pista\parser\MainParser.java
	 */

	/**This method checks if the command entered is supported by the program
	 * Parameters: String - a string that contains the user's command
	 * Return:		True if it is a valid command
	 * 				False if it is not
	 * **/
	private static boolean isCommandValid(String command){
		if(command.equalsIgnoreCase(Constants.VALUE_ADD) || command.equalsIgnoreCase(Constants.VALUE_EDIT) || 
				command.equalsIgnoreCase(Constants.VALUE_DELETE) || command.equalsIgnoreCase(Constants.VALUE_REDO) || 
				command.equalsIgnoreCase(Constants.VALUE_UNDO) || command.equalsIgnoreCase(Constants.VALUE_MARK) ||
				command.equalsIgnoreCase(Constants.VALUE_HELP) || command.equalsIgnoreCase(Constants.VALUE_SORT) || 
				command.equalsIgnoreCase(Constants.VALUE_SET) ||
				command.equalsIgnoreCase(Constants.VALUE_REMINDER) ||
				command.equalsIgnoreCase(Constants.VALUE_PRIORITY) ||
				command.equalsIgnoreCase(Constants.VALUE_SEARCH)){ //check for command type		
			return true;
		}else{
			assert false:"unacceptable command typed: "+command;
		return false;
		}//end if

	}//end checkCommand

	// End of segment: D:\install location\java\work\CS2103 PISTA\src\pista\parser\MainParser.java





	/**
	 * origin: D:\install location\java\work\CS2103 PISTA\src\pista\parser\MainParser.java
	 */

	/**This method checks the tokens for the Delete command
	 * Parameters: Object of MainParser
	 * 				String array - contains all parameters
	 * Return:		Boolean 
	 * 				True if the tokens are correct
	 * 				False if the tokens are wrong 
	 * **/
	private static boolean checkDeleteTokens(MainParser mp, String[] tokens) {
		mp.setTokens(tokens);
		if(tokens == null){
			mp.setMessage(Constants.PARSER_MESSAGE_INVALID_TOKEN_LENGTH);
			return false;
		}

		String input = tokens[Constants.INDEX_ZERO];
		try { 
			int id = Integer.parseInt(input); 
			// if it is a number
			if( id < 1 ){
				mp.setMessage(Constants.PARSER_MESSAGE_ID_LESS_THAN_ONE);
				return false;
			}
			return true;

		} catch(NumberFormatException e) { //if it is not a number
			if(!input.equalsIgnoreCase("a")){
				mp.setMessage(Constants.PARSER_MESSAGE_INVALID_SHORTHAND);
				return false;
			}
			return true;
		}
	}
	
	// End of segment: D:\install location\java\work\CS2103 PISTA\src\pista\parser\MainParser.java





